const Room = require('../room')
const Player = require('../player')

const socket = {
	emit: () => { },
	on: () => { }
}

const player1 = new Player({ ...socket, id: 1 })
const player2 = new Player({ ...socket, id: 2 })

player1.setName('john')
player2.setName('ivie')

test('Room classe test', () => {
	const room = new Room(4, () => { })
	expect(room.addPlayer(player1, 'john')).toBe(true)
	expect(room.addPlayer(player2, 'ivie')).toBe(true)
	expect(room.addPlayer(player1, 'john')).toBe(false)
	expect(room.addMessage("lol", "mdr")).toBe(true)
	player1.setState('ready')
	expect(room.stateCB('john', 'ready', 'loading')).toBe()
	expect(room.getState()).toBe('loading')
	player2.setState('ready')
	expect(room.stateCB('ivie', 'ready', 'loading')).toBe()
	expect(room.getState()).toBe('playing')
	expect(player1.getState()).toBe('playing')
	expect(player2.getState()).toBe('playing')
	expect(room.blackLineCB(1, 2)).toBe()
	expect(room.boardCB('john', 1, [])).toBe()
	player1.setState('gameOver')
	expect(room.stateCB('john', 'gameOver', 'playing')).toBe()
	expect(room.getState()).toBe('playing')
	player2.setState('gameOver')
	expect(room.stateCB('ivie', 'gameOver', 'playing')).toBe()
	expect(room.getState()).toBe('loading')
	expect(player1.getState()).toBe('loading')
	expect(player2.getState()).toBe('loading')
	expect(room.disconnect(1)).toBe()
	expect(room.addPlayer(player1, 'john')).toBe(true)
	player1.setState('ready')
	expect(room.stateCB('john', 'ready', 'loading')).toBe()
	expect(room.getState()).toBe('loading')
	player2.setState('ready')
	expect(room.stateCB('ivie', 'ready', 'loading')).toBe()
	expect(room.getState()).toBe('playing')
	player1.setState('gameOver')
	expect(room.getPlayerNo()).toBe(2)
	expect(room.stateCB('john', 'gameOver', 'playing')).toBe()
	expect(room.getState()).toBe('playing')
	expect(room.disconnect(2)).toBe()
	expect(room.getState()).toBe('loading')
	expect(room.getPlayerNo()).toBe(1)
	expect(room.getId()).toBe(4)
	expect(room.isIdIn(3)).toBe(false)
	expect(room.isIdIn(1)).toBe(true)
})